openapi: 3.0.3
info:
  title: Card Controls API
  description: >-
    The card controls API allows users to manage personalized controls and
    protect their cards from fraud.  Comprehensive card controls empower clients
    to manage the rules for when any transactions or operation should be
    approved or declined.
  contact:
    name: API Support
    url: 'https://developer.mastercard.com/support'
    email: apisupport@mastercard.com
  version: 2.0.0
servers:
  - description: Sandbox server
    url: 'https://sandbox.mi.api.mastercard.com/mi-issuing-sandbox/card-controls/'
  - description: MEA MTF/UAT server
    url: 'https://mtf.mea.api.mastercard.com/mi-issuing/card-controls/'
  - description: SA MTF/UAT server
    url: 'https://mtf.sa.api.mi.mastercard.com/mi-issuing/card-controls/'
  - description: MEA Production server
    url: 'https://mea.api.mastercard.com/mi-issuing/card-controls/'
  - description: SA Production server
    url: 'https://sa.api.mi.mastercard.com/mi-issuing/card-controls/'
tags:
  - name: Card Status
    description: Card Status management
  - name: Acquirer Control
    description: Acquirer/Merchant level card controls
  - name: Channel Control
    description: Channel level card controls
paths:
  '/cards/{card_id}/status':
    put:
      tags:
        - Card Status
      summary: >-
        **Update Card Status** - Change the card status like activate, block,
        unblock, stop list
      description: >-
        This API is used to block, unblock or activate a card. You can also use
        this API to activate paired cards, add a card to stop list, or withdraw
        a card from stop list. <br/>If the card alias is not uniquely defined at
        institution level, then you must use the 'product type', 'plan code' and
        'program code' to refine the search. Else the 'UNIQUE_RECORD_NOT_FOUND'
        error is returned. This error is also returned if the input form
        factor(s) fails to resolve to a single client as multiple clients
        available.<br/><br/>In case of success API returns 200 as HTTP status
        code.
      operationId: update
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/BankCode'
        - $ref: '#/components/parameters/CorrelationID'
        - $ref: '#/components/parameters/Source'
        - $ref: '#/components/parameters/EndUserID'
        - $ref: '#/components/parameters/CardID'
      requestBody:
        $ref: '#/components/requestBodies/UpdatedCardStatusRequest'
      responses:
        '200':
          $ref: '#/components/responses/UpdatedCardStatusDetailsResponse'
        '400':
          $ref: '#/components/responses/BadPostRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  '/cards/{card_id}/acquirer-level-controls':
    get:
      tags:
        - Acquirer Control
      summary: >-
        **Get Acquirer Controls** - Get a list of card controls applied at
        acquirer/merchant level to regulate usage.
      description: >-
        This API returns the controls applied on card usage at the following
        entities - Merchant Category Code(MCC) / Merchant Id(MID) / Merchant Id
        + Acquirer Id.<br/><br/> **Note: ** The card level configuration will
        have precedence over program level restriction.<br/> The transport
        between client applications and Mastercard is secured using TLS/SSL,
        which means data are encrypted by default when transmitted across
        networks.
      operationId: getAcquirerControl
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/BankCode'
        - $ref: '#/components/parameters/CorrelationID'
        - $ref: '#/components/parameters/Source'
        - $ref: '#/components/parameters/EndUserID'
        - $ref: '#/components/parameters/CardID'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/AcquirerControls'
      responses:
        '200':
          $ref: '#/components/responses/AcquirerCardUsageResponse'
        '400':
          $ref: '#/components/responses/BadGetRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags:
        - Acquirer Control
      summary: >-
        **Apply Acquirer Controls** - Apply new card controls at
        acquirer/merchant level to regulate usage.
      description: >-
        This API enables the consumer to apply controls on the usage of a card,
        wherein the consumer can activate or de-activate the card usage at the
        merchant. <br/><br/> Consumer has the flexibility to apply controls on
        the following valid combinations. Only one of them can be selected at a
        time - (mcc, merchantId, merchantId + acquirerId).<br/><br/> At
        institution and program level card usage can only be de-activated,
        whereas at the card level the usage can be activated as well as
        de-activated.<br/><br/> The integrated issuing system receives,
        validates, and processes the request. If the request is successful, the
        card usage is allowed or restricted. The system then logs the "Service
        Request Number(SR-454)" and sends the " Service Request Number" in the
        response message. If the request fails, the system returns the
        corresponding error code in the response and the service request is not
        logged.<br/><br/> **Note: ** The card level configuration will have
        precedence over program level restriction.<br/> The transport between
        client applications and Mastercard is secured using TLS/SSL, which means
        data are encrypted by default when transmitted across networks.
      operationId: createAcquirerControl
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/BankCode'
        - $ref: '#/components/parameters/CorrelationID'
        - $ref: '#/components/parameters/Source'
        - $ref: '#/components/parameters/EndUserID'
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/CardID'
      requestBody:
        $ref: '#/components/requestBodies/AcquirerCardControlRequest'
      responses:
        '201':
          $ref: '#/components/responses/AcquirerCardControlResponse'
        '400':
          $ref: '#/components/responses/BadPostRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  '/cards/{card_id}/channel-level-controls':
    get:
      tags:
        - Channel Control
      summary: >-
        **Get Channel Controls** - Get a list of card controls applied at
        channel level to regulate usage.
      description: >-
        This API returns the controls applied on card usage at various channels
        like 'International and domestic ATM', POS, E-Commerce, Contact-less,
        'MDES in-app' or 'VTS in-app', 'MDES contact-less' or 'VTS
        contact-less', and 'MDES token QR'.<br/><br/> This API returns the
        following activations or de-activations for the applicable transaction
        depending on the activation period.<br/>

        * If the activation type is periodic or for a specific duration, then
        current activations or de-activations are returned for periodic and
        immediate activation.<br/>

        * If the activation type is life long, only the latest entry is
        returned.<br/><br/> **Note: ** The card level configuration will have
        precedence over program level restriction.<br/> The transport between
        client applications and Mastercard is secured using TLS/SSL, which means
        data are encrypted by default when transmitted across networks.
      operationId: getChannelControl
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/BankCode'
        - $ref: '#/components/parameters/CorrelationID'
        - $ref: '#/components/parameters/Source'
        - $ref: '#/components/parameters/EndUserID'
        - $ref: '#/components/parameters/CardID'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/FutureCardControls'
      responses:
        '200':
          $ref: '#/components/responses/ChannelCardUsageResponse'
        '400':
          $ref: '#/components/responses/BadGetRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags:
        - Channel Control
      summary: >-
        **Apply Channel Controls** - Apply new card controls at channel level to
        regulate usage.
      description: >-
        This API enables the consumer to apply controls on the usage of a card,
        wherein the consumer can activate or de-activate the card usage on the
        following channel's - 'International and domestic ATM', POS, E-Commerce,
        Contactless, 'MDES in-app' or 'VTS in-app', 'MDES contactless' or 'VTS
        contactless', and 'MDES token QR'.<br/><br/> At institution and program
        level card usage can only be de-activated, whereas at the card level the
        usage can be activated as well as de-activated.<br/><br/> The integrated
        issuing system receives, validates, and processes the request. If the
        request is successful, the card usage is allowed or restricted. The
        system then logs the 'Service Request Number(SR-454)' and sends the
        'Service Request Number' in the response message. If the request fails,
        the system returns the corresponding error code in the response and the
        service request is not logged.<br/><br/> The highest priority is given
        to life-long activation, followed by periodic activation, and lastly the
        immediate activation in hours.<br/><br/> **Note: ** The card level
        configuration will have precedence over program level restriction. The
        transport between client applications and Mastercard is secured using
        'TLS/SSL', which means data are encrypted by default when transmitted
        across networks.
      operationId: createChannelControl
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/BankCode'
        - $ref: '#/components/parameters/CorrelationID'
        - $ref: '#/components/parameters/Source'
        - $ref: '#/components/parameters/EndUserID'
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/CardID'
      requestBody:
        $ref: '#/components/requestBodies/ChannelCardControlRequest'
      responses:
        '201':
          $ref: '#/components/responses/ChannelCardControlResponse'
        '400':
          $ref: '#/components/responses/BadPostRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
components:
  schemas:
    RequestValidityTime:
      description: >-
        Validity of the API request. It protects the API from unauthorized
        request or man-in-the-middle (MITM) attacks <br/>For example, if the
        validity of the API request is set for a maximum of 5 minutes (including
        retry attempts), and someone tries to post the same request after 5
        minutes, then the system rejects the API request without processing.
      type: object
      required:
        - dataValidUntilTimestamp
      properties:
        dataValidUntilTimestamp:
          type: string
          format: date-time
          description: >-
            The date and time after which the request is considered as invalid.
            If the timestamp of the institution is greater than this timestamp,
            the API request is considered as expired and is returned.<br/>The
            'dataValidUntilTimestamp' parameter is converted into the
            institution time zone before comparing it with the institution date
            and time. It is expressed in ISO 8601 extended format. Must be
            either <br/> 'YYYY-MM-DDThh:mm:ss[.sss]Z'<br/> or
            'YYYY-MM-DDThh:mm:ss[.sss] (+|-) hh:mm' where [.sss] is optional and
            can be 1 to 3 digits.
          minLength: 20
          maxLength: 29
          example: '2020-07-04T12:09:56.450-07:00'
    UpdatedCardStatus:
      allOf:
        - $ref: '#/components/schemas/RequestValidityTime'
      type: object
      description: >-
        Search Cards Plain request data to be encrypted by the ephemeral 'AES'
        key using 'CBC' mode (IV as provided in 'iv', or zero if none provided)
        and 'PKCS#7' padding. To be hex encoded.
      required:
        - productType
        - status
      properties:
        productType:
          $ref: '#/components/schemas/ProductType'
        status:
          $ref: '#/components/schemas/RequestedCardStatus'
        reason:
          $ref: '#/components/schemas/ReasonCode'
        activatePairedCard:
          type: boolean
          description: >-
            Indicates request to activate paired cards. If the input card is not
            one of the paired cards, and a request is received, then the request
            will be rejected.
          example: false
        remarks:
          $ref: '#/components/schemas/Remarks'
    UpdatedCardStatusDetails:
      type: object
      properties:
        cards:
          type: array
          description: List of cards
          items:
            $ref: '#/components/schemas/CardStatusUpdateResult'
    ProductType:
      type: string
      description: >-
        Type of product. It is also useful to identify a unique card if multiple
        cards are linked to a card number alias. <br/> **Valid values:**

        * `PREPAID` - Prepaid Card

        * `CREDIT` - Credit Card

        * `DEBIT` - Debit Card
      example: PREPAID
    ReasonCode:
      type: string
      description: >-
        Reason for requesting change of card status. <br/> **Conditional
        Mandatory**<font color='red'>* </font> field - Required in case of below
        scenarios. An error will be returned if present for any other scenarios.
        <br/><br/> Scenario-1 - If request is for stop list withdrawal (by
        changing the card status from `LOST`, `STOLEN`, `COUNTERFEIT`,
        `RETURNED`, `EXPIRED`, `DAMAGED`, `EMERGENCY_REPLACEMENT`, `ERRONEOUS`
        to `NORMAL`). <br/>**Valid values: **

        * `FOUND_CARD` - Found card

        * `CAPTURE_CARD` - Capture card

        * `BANK_DECISION` - Bank decision

        * `OVERDUE_CARD` - Overdue card

        * `STOPLIST_CARD` - Stop list card

        * `MISCELLANEOUS` - Miscellaneous

        * `UNBLOCKED_CARD` - Unblocked card

        * `REPLACEMENT_CANCELLATION` - Replacement Cancellation <br/><br/>
        Scenario-2 - If request is for activating paired card (by changing the
        card status to `REPLACED`). <br/>**Valid values: **

        * `ERRONEOUS` - Erroneous card

        * `LOST` - Card lost

        * `STOLEN` - Card stolen

        * `COUNTERFEIT` - Card counterfeit

        * `OTHER` - Other

        * `DAMAGED` - Card damaged

        * `EMERGENCY_REPLACEMENT` - Emergency replacement
      example: FOUND_CARD
    RequestedCardStatus:
      type: string
      description: >-
        The requested status of the card. <br/> **Valid values: **

        * `NORMAL` - Indicates request to activate the card to allow all
        operation normally.<br/>  - If the current status of the card is
        `NORMAL` but card is currently not active and card plan activation mode
        is 'MANUAL' then card activation process will be initiated.<br/>  - If
        the current status of the card is `BLOCKED` then card will be
        unblocked.<br/>  - If the card is currently added in stop list then stop
        list withdrawal process will be initiated.  Stop list withdrawal will be
        denied if status is configured as sticky (can't be changed).<br/>

        * `REPLACED` - Indicates paired card activation request.<br/>  Supported
        only if `activatePairedCard` value is `true` in the request  and current
        status of the card is `NORMAL` or `BLOCKED` and paired card status is
        `NOT_ACTIVATED`.

        * `BLOCKED` - Indicates blocked Card<br/>

        * `LOST` - Indicates lost card. Initiate the request to add the card to
        the stop list.<br/>

        * `STOLEN` - Indicates stolen card. Initiate the request to add the card
        to the stop list.<br/>

        * `COUNTERFEIT` - Indicates counterfeit card. Initiate the request to
        add the card to the stop list.<br/>

        * `RETURNED` - Indicates returned card. Initiate the request to add the
        card to the stop list.<br/>

        * `EXPIRED` - Indicates expired card. Initiate the request to add the
        card to the stop list.<br/>

        * `DAMAGED` - Indicates card is damaged. Initiate the request to add the
        card to the stop list.<br/>

        * `EMERGENCY_REPLACEMENT` - Indicates emergency replacement card.
        Initiate the request to add the card to the stop list.<br/>

        * `ERRONEOUS` - Indicates card is erroneous. Initiate the request to add
        the card to the stop list.<br/>
      example: NORMAL
    CardIdentifiers:
      description: Card Identifiers
      type: object
      properties:
        number:
          $ref: '#/components/schemas/CardNumber'
        id:
          $ref: '#/components/schemas/CardId'
        relationship:
          $ref: '#/components/schemas/CardRelationship'
        clientCode:
          $ref: '#/components/schemas/ClientCode'
    CardStatusUpdateResult:
      allOf:
        - $ref: '#/components/schemas/CardIdentifiers'
      description: Linked Card Details
      type: object
      properties:
        status:
          $ref: '#/components/schemas/CardStatus'
        pinOverSms:
          type: boolean
          description: >-
            Indicates whether PIN number of the card needs to be sent through an
            SMS.
          example: false
        expiry:
          $ref: '#/components/schemas/CardExpiry'
        expiryDateTime:
          $ref: '#/components/schemas/LvcExpiryDateTime'
        productType:
          $ref: '#/components/schemas/ProductType'
    CardStatus:
      type: string
      description: >-
        The current status of the card. <br/> **Valid values: ** <br/>

        * `NORMAL` - Indicates normal card

        * `SUPERVISION` - Indicates supervision card

        * `CANCELLED` - Indicates cancelled card

        * `REPLACED` - Indicates replaced card

        * `LOST` - Indicates lost card

        * `STOLEN` - Indicates stolen card

        * `COUNTERFEIT` - Indicates counterfeit card

        * `RETURNED` - Indicates returned card

        * `PROGRAM_CHANGE_OR_UPGRADE` - Indicates program change card

        * `RETURNED_CARD_RENEWAL` - Indicates returned card renewal card

        * `NOT_ACTIVATED` - Indicates card is not activated

        * `EXPIRED` - Indicates expired card

        * `INACTIVE` - Indicates inactive card

        * `BLOCKED` - Indicates blocked Card

        * `DISPATCHED` - Indicates card dispatched

        * `READY_FOR_SALE` - Indicates Ready for Sale Card

        * `TRANSFERRED_TO_OTHER_BRANCH` - Indicates transferred to another
        branch card

        * `RETURNED_AND_SHREDDED` - Indicates Returned to bank and shredded card

        * `DAMAGED` - indicates Card is damaged

        * `EMERGENCY_REPLACEMENT` - Indicates emergency replacement card

        * `ERRONEOUS` - Indicates card is erroneous

        * `RETENTION` - Indicates retention card

        * `NPA_RECLASSIFIED` - Indicates NPA Reclassified card

        * `TECHNOLOGY_UPGRADE` - Indicates card technology upgrade Card

        * `REPLACED_INACTIVE` - Indicates replaced-inactive card

        * `RENEWED_INACTIVE` - Indicates renewed-inactive card
      example: NORMAL
    CardRelationship:
      type: string
      example: PRIMARY
      description: >-
        An indicator at card level to describe type of client associated with
        the card. <br/> **Valid values: **

        * `PRIMARY` - Indicates primary card

        * `ADD_ON` - Indicates add-on card

        * `SUPPLEMENTARY` - Indicates supplementary card
    ClientCode:
      type: string
      description: Unique code of the client
      minLength: 4
      maxLength: 24
      pattern: '[a-zA-Z0-9]+'
      example: 0000215812722194
    CardNumber:
      type: string
      description: >-
        Unique number (PAN) assigned to the card. This number might be masked
        based on the API masking configuration settings of the institution in
        the MI Issuing customer portal.
      minLength: 12
      maxLength: 22
      pattern: '[0-9]+'
      example: '5001878976540298'
    CardId:
      type: string
      description: Unique value to identify a card
      minLength: 32
      maxLength: 32
      pattern: '[A-Z0-9]+'
      example: C24B56D71AA2E015E053F482A80ABD00
    CardExpiry:
      type: string
      description: >-
        Expiry date of the card in "MM/YY" format. This field is not applicable
        for LVC cards. The expiry and 'expiry date time' fields are mutually
        exclusive, which means you can use any one of these fields to specify
        the details.
      pattern: '(0[1-9]|1[0-2])/[0-9]{2}'
      example: 11/30
    LvcExpiryDateTime:
      type: string
      format: date-time
      description: >-
        Applicable only for LVC Card. The date/time after which LVC card should
        be considered as expired or invalid.<br/> <br/> The expiry & 'expiry
        date time' fields are mutually exclusive. <br/>Expressed in ISO 8601
        extended format. Must be <br/> YYYY-MM-DDThh:mm:ss[.sss](+|-)hh:mm where
        [.sss] is optional and can be 1 to 3 digits.
      minLength: 20
      maxLength: 29
      example: '2022-07-04T12:09:56.450-07:00'
    Remarks:
      type: string
      minLength: 1
      maxLength: 1000
      description: >-
        Free text field that contains remarks or comments entered while
        submitting the request.
      pattern: '[^%<>\\[\\]^$]+'
      example: Request received by Helpdesk portal
    ErrorMessage:
      required:
        - Description
        - ReasonCode
        - Recoverable
        - Source
      type: object
      properties:
        Source:
          type: string
          description: The application or component that generated this error.
          minLength: 3
          maxLength: 50
          example: MI-Issuing
        ReasonCode:
          type: string
          description: >-
            Reason code is a unique constant identifying the error case
            encountered during request processing.
          minLength: 5
          maxLength: 100
          example: MISSING_REQUIRED_FIELD
        Description:
          type: string
          description: Human-readable short description of the reason code.
          minLength: 10
          maxLength: 250
          example: Missing Required Field '<Field-Name>'
        Details:
          type: string
          description: >-
            Optional detailed description provides information about data
            received and calculated during request processing. This helps the
            user to diagnose errors.
          minLength: 0
          maxLength: 1000
          example: This is mandatory field while requesting for new card.
        Recoverable:
          type: boolean
          description: >-
            Recoverable flag indicates whether this error is always returned for
            this request, or retrying could change the outcome. For example,
            'true' or 'false'.
          example: false
    Errors:
      required:
        - Error
      type: object
      properties:
        Error:
          type: array
          description: Errors array wrapped in an error object
          items:
            $ref: '#/components/schemas/ErrorMessage'
    ErrorsInfo:
      required:
        - Errors
      type: object
      properties:
        Errors:
          $ref: '#/components/schemas/Errors'
    AcquirerCardUsageProfile:
      type: object
      description: >-
        Controls applied to the card at merchant level will be returned in case
        of success.
      properties:
        pagination:
          $ref: '#/components/schemas/ResponsePagination'
        acquirerControls:
          description: >-
            This block contains information about the card controls that can be
            applied at merchant level.
          type: array
          minItems: 1
          maxItems: 20
          uniqueItems: true
          items:
            $ref: '#/components/schemas/AcquirerControl'
    AcquirerControl:
      type: object
      description: >-
        This block contains information about the parameters required to apply
        card controls at the merchant level.<br/>
      allOf:
        - $ref: '#/components/schemas/AcquirerCardControlMetadata'
      properties:
        isAllowed:
          $ref: '#/components/schemas/ControlStatus'
        ruleAppliedAt:
          $ref: '#/components/schemas/RuleAppliedAt'
    ResponsePagination:
      type: object
      description: >-
        Meta information of the result set returned in the current response -
        <br> Scenarios - <br> - Given a valid request body, search returns the
        first 5 items matching the search criteria, assuming a default limit of
        5 <br> - Given a valid request body, search with limit as 3, returns
        first 3 items matching the search criteria <br> - Given a valid request
        body, search with offset as 2 and limit as 5, returns items 3...7
        matching the search criteria <br> - Given a valid request body, search
        with offset as 3 returns, items 4...8 matching the search criteria,
        assuming a default limit of 5.
      required:
        - offset
        - limit
        - count
        - total
      properties:
        offset:
          description: >-
            The number of items you asked the start of the list to be offset
            from
          type: integer
          format: int32
          minimum: 0
          example: 25
        limit:
          description: The number of items you asked the list to be limited to
          type: integer
          format: int32
          minimum: 1
          example: 25
        count:
          description: The number of items in this batch (the size of the item array).
          type: number
          minimum: 0
          example: 10
        total:
          description: The total number of items in the collection
          type: number
          minimum: 0
          example: 35
    RuleAppliedAt:
      type: string
      description: >-
        This indicates the rule is applied at which level.<br/> **Possible
        values: **

        * `PROGRAM` - Indicates rule is applied at program level.

        * `CARD` - Indicates rule is applied at card level.
      example: CARD
    ControlStatus:
      type: boolean
      description: This field indicates status of the control.
      example: false
    MerchantCategoryCode:
      type: string
      description: >-
        Classification of business by the type of goods or services it provides.
        All predefined values based on the business function are stored in the
        system.
      pattern: '^[0-9]{1,4}$'
      example: 5001
    MerchantId:
      type: string
      description: >-
        It is a unique identifier assigned to the merchant by the
        Acquirer(Acceptor Merchant Id or MID).
      pattern: '^[0-9]{1,15}$'
      example: 141234453673564
    AcquirerId:
      type: string
      description: >-
        Acquiring institution identification code (ISO-8583 DE-32) is used to
        identify the partner submitting the requests. This field is also
        significant in determining single or dual message operation for a given
        partner.
      pattern: '[0-9]{1,11}'
      example: '60300000063'
    AcquirerCardControlMetadata:
      type: object
      description: >-
        This block contains information of the following acquirer parameters -
        'Merchant Category Code', 'Merchant ID' and 'Acquirer ID'.<br/>
      properties:
        mcc:
          $ref: '#/components/schemas/MerchantCategoryCode'
        merchantId:
          $ref: '#/components/schemas/MerchantId'
        acquirerId:
          $ref: '#/components/schemas/AcquirerId'
    AcquirerCardUsageControl:
      allOf:
        - $ref: '#/components/schemas/RequestValidityTime'
      type: object
      description: >-
        This block contains information about the card controls that can be
        applied at the merchant level.
      properties:
        acquirerControls:
          description: >-
            This block contains information about the parameters required to
            apply card controls at the merchant level.
          type: array
          minItems: 1
          maxItems: 20
          uniqueItems: true
          required:
            - isAllowed
          items:
            $ref: '#/components/schemas/AcquirerCardControl'
    AcquirerCardControl:
      type: object
      description: >-
        This block contains information about acquirer card control based on
        'Merchant Category Code', 'Merchant ID' and 'Acquirer ID'. <br/> This
        will enable card issuers to control usage of entity as per their program
        offering.<br/> **Conditional Mandatory**<font color='red'>* </font>
        parameter - Atleast one from mcc, 'merchant Id' or 'acquirer Id' &
        'merchant Id' should be present. If none of them is present then the
        request should not be processed further.
      required:
        - isAllowed
      allOf:
        - $ref: '#/components/schemas/AcquirerCardControlMetadata'
      properties:
        isAllowed:
          $ref: '#/components/schemas/ControlStatus'
    ControlServiceRequests:
      type: object
      properties:
        serviceRequestNumbers:
          type: array
          description: >-
            Contains all the service request numbers, generated on successful
            completion of the request.
          items:
            type: string
          example:
            - '10051811637'
            - '10051811640'
            - '10051811643'
    ChannelCardUsageProfile:
      type: object
      description: >-
        Controls applied to the card at channel level will be returned in case
        of success.
      properties:
        pagination:
          $ref: '#/components/schemas/ResponsePagination'
        channelControls:
          type: array
          items:
            $ref: '#/components/schemas/ChannelControlMetadata'
    Channel:
      type: string
      description: >-
        This field indicates the list of supported transactions channel for
        which control is placed.<br/> **Possible values: **

        * `ECOMMERCE` - Indicates control is placed at 'Ecommerce' channel.

        * `POS` - Indicates control is placed at 'POS' channel.

        * `ATM` - Indicates control is placed at 'ATM' channel.

        * `CONTACTLESS` - Indicates control is placed at 'Contactless' channel.

        * `TOKEN_CONTACTLESS` - Indicates control is placed at 'Token
        Contactless' channel.

        * `TOKEN_QR` - Indicates control is placed at 'Token QR' channel.

        * `TOKEN_IN_APP` - Indicates control is placed at 'Token IN-APP'
        channel.

        * `ALL` - Indicates all possible values for channels.
      example: ECOMMERCE
    Origin:
      type: string
      description: >-
        This field indicates the list of supported transactions origin for which
        control is placed.<br/> **Possible values: **

        * `INTERNATIONAL` - Indicates control is placed at international level.

        * `DOMESTIC` - Indicates control is placed at domestic level.

        * `ALL` - Indicates all possible values for origin.
      example: INTERNATIONAL
    ControlType:
      type: string
      description: >-
        This field indicates the type of control applied.<br/> **Possible
        values: **

        * `LIFE_LONG` - Indicates control is for life-long.

        * `IMMEDIATE_USE` - Indicates control is for immediate use.

        * `SPECIFIC_DURATION` - Indicates control is for a specific duration.
      example: LIFE_LONG
    TimeDuration:
      type: integer
      format: int32
      description: >-
        This field indicates the time duration in Hour(s) for which control is
        applicable.<br/> **Conditional Mandatory**<font color='red'>* </font>
        parameter - This field must be shared only if control type is
        `IMMEDIATE_USE`.
      minimum: 1
      maximum: 999
      example: 24
    DateTimeRange:
      title: Date-Time Range
      type: object
      required:
        - from
      properties:
        from:
          type: string
          format: date
          description: >-
            Expressed in ISO 8601 extended format in YYYY-MM-DD .<br /> Must be
            used together with 'to date' field, 'from date' cannot be greater
            than 'to date' field.<br /> **Conditional Mandatory**<font
            color='red'>* </font> parameter - This field will be shared only if
            control type is `SPECIFIC_DURATION`.
          example: '2021-07-16'
        to:
          type: string
          format: date
          description: >-
            Expressed in ISO 8601 extended format in YYYY-MM-DD.<br /> Must be
            used together with 'to date' field, 'to date' cannot be smaller than
            'from date' field.<br /> **Conditional Mandatory**<font
            color='red'>* </font> parameter - This field will be shared only if
            control type is `SPECIFIC_DURATION`.
          example: '2021-07-16'
    Country:
      type: string
      description: >-
        It is a transaction acquirer country code. It is expressed as a 2-letter
        (Alpha-2) country code as defined in ISO 3166. Conditional Mandatory*
        parameter - This field must be shared only if control type is
        SPECIFIC_DURATION and origin is INTERNATIONAL or ALL.
      example: IN
      pattern: '[A-Z]{2,2}'
    ChannelRulesMetadata:
      type: object
      description: >-
        This block contains data about channel and origin required to control
        usage on a card.
      properties:
        channel:
          $ref: '#/components/schemas/Channel'
        origin:
          $ref: '#/components/schemas/Origin'
        country:
          $ref: '#/components/schemas/Country'
        isAllowed:
          $ref: '#/components/schemas/ControlStatus'
    ChannelControlMetadata:
      type: object
      description: >-
        This block contains data about various parameters required to control
        usage on a card.
      properties:
        type:
          $ref: '#/components/schemas/ControlType'
        timeDuration:
          $ref: '#/components/schemas/TimeDuration'
        dateDuration:
          $ref: '#/components/schemas/DateTimeRange'
        rules:
          type: array
          description: Information about the required parameters that the array can hold.
          minItems: 1
          maxItems: 20
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ChannelRulesMetadata'
    ChannelCardUsageControl:
      allOf:
        - $ref: '#/components/schemas/RequestValidityTime'
      type: object
      description: >-
        This block contains information about card controls applied at channel
        level.
      properties:
        channelControls:
          $ref: '#/components/schemas/ChannelControlMetadata'
  parameters:
    CardID:
      name: card_id
      in: path
      description: >-
        A unique system-generated ID that is assigned to a card during card
        issuance. This ID can be used instead of the card number while sharing
        PCI sensitive data.

        * minLength: 32

        * maxLength: 32

        * pattern: [A-Z0-9]+
      required: true
      schema:
        type: string
        minLength: 32
        maxLength: 32
        pattern: '[A-Z0-9]+'
      example: C24B56D71AA2E015E053F482A80ABD00
    CorrelationID:
      name: X-MC-Correlation-ID
      in: header
      description: >-
        'Correlation ID', also known as 'Transit ID' or 'Request ID', is unique
        identifier value attached to a particular transaction or event chain.
        The 'Correlation ID' also helps in auditing, debugging, and tracing the
        request execution flow. <BR/> It is recommended to generate universally
        unique identifier (UUID) in compliance with 'RFC 4122'.<BR/> If the
        'Correlation ID' is not received in the incoming request, the
        'Mastercard Processing' platform generates a universally unique
        identifier (UUID) dynamically and assigns it to the request. The
        Correlation ID is always added to the response header to provide end to
        end traceability.

        * minLength: 6

        * maxLength: 36

        * pattern: [a-zA-Z0-9_-]+
      schema:
        type: string
        minLength: 6
        maxLength: 36
        pattern: '[a-zA-Z0-9_-]+'
      example: ac97d177-9345-4934-8343-0f91a7a02836
    BankCode:
      name: X-MC-Bank-Code
      in: header
      description: >-
        It is a 6-digit bank/institution identifier code. <br/> **Conditional
        Mandatory**<font color='red'>* </font> field - Required to be passed by
        third party vendors or service provider (like 3-D Secure authenticator)
        who has access to the data of multiple banks, supported by legal
        agreement and access grants.

        * minLength: 6

        * maxLength: 6

        * pattern: [0-9]+
      schema:
        type: string
        minLength: 6
        maxLength: 6
        pattern: '[0-9]+'
      example: '112233'
    Source:
      name: X-MC-Source
      in: header
      description: >-
        Value identifying the origin or source of a transaction. The list of
        possible sample values are available in the database and shared in the
        'API_SOURCE_VALUES' list under 'Card Management > Institution Parameter
        Setup > System Codes [ISSS15]'. This field is used only for logging
        purpose.<br/>

        * minLength: 3

        * maxLength: 3

        * pattern: [A-Z0-9]+ <br/> <br/> **Few sample values: ** <br/>

        * `IVR` - Interactive Voice Response

        * `MAP` - Mobile Application

        * `ATM` - Automated Teller Machine

        * `NBN` - Net Banking Application

        * `POS` - Point of Sale

        * `SCH` - Scheme

        * `CBS` - Core Banking System

        * `SMS` - Short Message Service

        * `ACS` - Access Control Server

        * `ONS` - On-Us Transaction

        * `OTH` - Other
      schema:
        type: string
        minLength: 3
        maxLength: 3
        pattern: '[A-Z0-9]+'
      example: MAP
    EndUserID:
      name: X-MC-Client-Application-User-ID
      in: header
      description: >-
        A unique identifier to track end user who is performing action at the
        client's or consumer's end. <BR/>This field is used only for logging
        purpose.

        * minLength: 3

        * maxLength: 50

        * pattern: [a-zA-Z0-9_-]+
      schema:
        type: string
        minLength: 3
        maxLength: 50
        pattern: '[a-zA-Z0-9_-]+'
      example: S0648-IN
    Fields:
      in: query
      name: fields
      description: >-
        The 'fields' parameter restricts the set of properties to be returned
        for a field in the API response. These properties must be present in the
        API response structure that is the json path. These properties can be
        added as a comma-separated list.
      required: false
      schema:
        type: string
        minLength: 2
        maxLength: 1000
        pattern: '[a-zA-Z0-9.,]+'
      examples:
        'Sample-1-[Path = credit > card > id]':
          value: credit.card.id
        'Sample-2-[Path = card > id]':
          value: card.id
        'Sample-3-[Path = acquirerControls > mcc ]':
          value: acquirerControls.mcc
    Limit:
      in: query
      name: limit
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000
      required: false
      description: Maximum numbers of items to be returned in response
      example: 10
    Offset:
      in: query
      name: offset
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 1000
      required: false
      description: The number of items to skip before starting to collect the result.
      example: 0
    AcquirerControls:
      name: acquirer_controls
      in: query
      description: >-
        The 'acquirer_controls' parameter restricts the set of data to be
        returned in the API response. It returns allowed, disallowed, both or no
        acquirer controls. By default, it will return only disallowed acquirer
        controls. <br/> **Valid values:**<br/>

        * `ALLOWED` - Allowed controls

        * `DISALLOWED` - Disallowed controls

        * `BOTH` - Allowed and disallowed controls

        * `NONE` - No controls applied
      schema:
        type: string
      example: DISALLOWED
    IdempotencyKey:
      name: X-MC-Idempotency-Key
      in: header
      required: true
      description: >-
        An idempotency key is a unique value that is generated by a client and
        sent to an API along with a request. If a request should fail partway
        through, the client retries with the same idempotency key value, and the
        server uses it to look up the state of request and continue from where
        it left off. Recommended to generate universally unique identifier
        (UUID) compliant with 'RFC 4122'.
      schema:
        type: string
        pattern: '^[a-zA-Z0-9_-]{6,36}$'
      example: bc57d177-4593-3449-8343-0d81a7a02947
    FutureCardControls:
      name: future_card_controls
      in: query
      description: >-
        The 'future_card_controls' parameter restricts the set of data to be
        returned in the API response. It can contain only true or false boolean
        values. By default, it will be false. <br/> **Few sample values:** <br/>

        * `true` - Show future card controls

        * `false` - Show current card controls
      schema:
        type: boolean
      example: false
  headers:
    Response-Correlation-ID:
      description: >-
        Returns the request identifier (like UUID) received in client request
        header or generated by the server.
      schema:
        type: string
        minLength: 6
        maxLength: 36
      example: ac97d177-9345-4934-8343-0f91a7a02836
    Response-Idempotency-Key:
      description: >-
        Echo back the idempotency key received in client request header, only if
        the duplicate request is received with same idempotency key within
        predefined time.
      schema:
        type: string
        minLength: 6
        maxLength: 36
      example: bc57d177-4593-3449-8343-0d81a7a02947
  requestBodies:
    UpdatedCardStatusRequest:
      description: Updated card status and related details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatedCardStatus'
      required: true
    AcquirerCardControlRequest:
      description: >-
        This contains the set of rules that will be added to the card at
        merchant level.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AcquirerCardUsageControl'
    ChannelCardControlRequest:
      description: >-
        This contains the set of rules that will be added to the card at channel
        level.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChannelCardUsageControl'
  responses:
    UpdatedCardStatusDetailsResponse:
      description: The card status was successfully updated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatedCardStatusDetails'
    BadPostRequestError:
      description: >-
        The request failed due to invalid or missing value. The value could be a
        header value, a query parameter value, or a request body property value.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorsInfo'
          examples:
            MissingRequiredFieldExample:
              $ref: '#/components/examples/MissingRequiredFieldExample'
            InvalidFieldValueExample:
              $ref: '#/components/examples/InvalidFieldValueExample'
            InvalidFieldFormatExample:
              $ref: '#/components/examples/InvalidFieldFormatExample'
            InvalidFieldLengthExample:
              $ref: '#/components/examples/InvalidFieldLengthExample'
            CryptographyErrorExample:
              $ref: '#/components/examples/CryptographyErrorExample'
      headers:
        X-MC-Correlation-ID:
          $ref: '#/components/headers/Response-Correlation-ID'
    UnauthorizedError:
      description: Authentication information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorsInfo'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/UnauthorizedExample'
      headers:
        X-MC-Correlation-ID:
          $ref: '#/components/headers/Response-Correlation-ID'
    ForbiddenError:
      description: Insufficient permissions for interacting with the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorsInfo'
          examples:
            ForbiddenExample:
              $ref: '#/components/examples/ForbiddenExample'
      headers:
        X-MC-Correlation-ID:
          $ref: '#/components/headers/Response-Correlation-ID'
    AcquirerCardUsageResponse:
      description: >-
        The response is successfully returned when the card usage control
        information is successfully retrieved.<br/>
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AcquirerCardUsageProfile'
    BadGetRequestError:
      description: >-
        The request failed due to invalid or missing value. The value could be a
        header value, a query parameter value, or a request body property value.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorsInfo'
          examples:
            MissingRequiredFieldExample:
              $ref: '#/components/examples/MissingRequiredFieldExample'
            InvalidFieldValueExample:
              $ref: '#/components/examples/InvalidFieldValueExample'
            RecordNotFoundExample:
              $ref: '#/components/examples/RecordNotFoundExample'
            UniqueRecordNotFoundExample:
              $ref: '#/components/examples/UniqueRecordNotFoundExample'
      headers:
        X-MC-Correlation-ID:
          $ref: '#/components/headers/Response-Correlation-ID'
    AcquirerCardControlResponse:
      description: >-
        This indicates that the request has been fulfilled and resulted in a new
        resource being created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ControlServiceRequests'
      headers:
        X-MC-Idempotency-Key:
          $ref: '#/components/headers/Response-Idempotency-Key'
    ChannelCardUsageResponse:
      description: >-
        The response is successfully returned when the card usage control
        information is successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChannelCardUsageProfile'
    ChannelCardControlResponse:
      description: >-
        This indicates that the request has been fulfilled and resulted in a new
        resource being created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ControlServiceRequests'
      headers:
        X-MC-Idempotency-Key:
          $ref: '#/components/headers/Response-Idempotency-Key'
  examples:
    UnauthorizedExample:
      value:
        Errors:
          Error:
            - Source: MI-Issuing
              ReasonCode: UNAUTHORIZED
              Description: We couldn't recognize you
              Recoverable: false
              Details: >-
                The user does not have valid certificate for the target
                resource.
    ForbiddenExample:
      value:
        Errors:
          Error:
            - Source: MI-Issuing
              ReasonCode: AUTHORIZATION_ERROR
              Description: It seems you don't have permission to access this API
              Recoverable: false
              Details: >-
                Please ensure that access has been granted to the user in
                customer portal
    MissingRequiredFieldExample:
      value:
        Errors:
          Error:
            - Source: MI-Issuing
              ReasonCode: MISSING_REQUIRED_FIELD
              Description: Missing required field '<Field-Name>'
              Recoverable: false
              Details: null
    InvalidFieldValueExample:
      value:
        Errors:
          Error:
            - Source: MI-Issuing
              ReasonCode: INVALID_FIELD_VALUE
              Description: '''<Field-Name>'' field value ''<Field-Value>'' is invalid'
              Recoverable: false
    InvalidFieldFormatExample:
      value:
        Errors:
          Error:
            - Source: MI-Issuing
              ReasonCode: INVALID_FIELD_FORMAT
              Description: '''<Field-Name>'' field value ''<Field-Value>'' format is invalid'
              Recoverable: false
    InvalidFieldLengthExample:
      value:
        Errors:
          Error:
            - Source: MI-Issuing
              ReasonCode: INVALID_FIELD_LENGTH
              Description: '''<Field-Name>'' size must be between 1 and 3'
              Recoverable: false
    CryptographyErrorExample:
      value:
        Errors:
          Error:
            - Source: MI-Issuing
              ReasonCode: CRYPTOGRAPHY_ERROR
              Description: Error occurred while decryption of the encrypted request payload
              Recoverable: false
              Details: null
    RecordNotFoundExample:
      value:
        Errors:
          Error:
            - Source: MI-Issuing
              ReasonCode: RECORD_NOT_FOUND
              Description: Record not found based on the given input.
              Recoverable: false
              Details: null
    UniqueRecordNotFoundExample:
      value:
        Errors:
          Error:
            - Source: MI-Issuing
              ReasonCode: UNIQUE_RECORD_NOT_FOUND
              Description: Multiple records found for given search criteria.
              Recoverable: false
              Details: null
